#!/usr/bin/perl

=head1 NAME

thyme - A proof-of-concept CI-like thing.

=cut

=head1 SYNOPSIS

  thyme [options]

  General Options:

   --help         Show the help information for this script.
   --verbose      Show useful debugging information.
   --container=xx Use the specified docker image for our container-build.
   --recipe=XX    Load our recipe from the given file.

=cut


=head1 ABOUT

thyme is a simple script which is designed to allow building software in
isolated Docker containers.  It allows you to test build-dependencies,
and packaging without polluting your host - or setting up a complex
build-environment.

It is named `thyme` because it should save you time, even if it isn't
a full and flexible pipeline system with dependencies like ick, or
gitlab-runners.

=cut

=head1 OPERATIONS

The program parses a recipe which can contain three sections of commands:

=over 8

=item before
A list of commands to be executed (on the host) before starting the container.

=item during
A list of commands to be executed (in a container) to run your job.

=item after
A list of commands to be executed (on the host) after completing the job.

=back

If any of these sections fail then the process will be aborted.

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut


=head1 LICENSE

Copyright (c) 2018 by Steve Kemp.  All rights reserved.

=cut




use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Temp;



package Thyme;


=begin doc

Create a new Thyme job, with the specified file.

=for example begin

    #!/usr/bin/perl -w

    use Thyme;
    use strict;

    my $obj = Thyme->new( filename => '/path/to/recipe.in');
    my $obj->Execute( "debian:stretch" );

=for example end

=end doc

=cut

sub new
{
    my ( $proto, %supplied ) = (@_);
    my $class = ref($proto) || $proto;

    my $self = {};

    #
    #  Allow user supplied values to override our defaults
    #
    foreach my $key ( keys %supplied )
    {
        $self->{ lc $key } = $supplied{ $key };
    }

    bless( $self, $class );

    #
    # Ensure we were given a recipe in our constructor
    #
    die "Missing filename parameter" unless ( $self->{ 'filename' } );

    #
    # Parse the named recipe.
    #
    $self->{ 'job' } = $self->loadRecipe( $self->{ 'filename' } );

    return $self;

}


=begin doc

loadRecipe parses the specified configuration-file of tasks to execute.

CI jobs are divided into three parts: before, during, and after. So this
function returns a hash with those three keys.

=end doc

=cut

sub loadRecipe
{
    my ( $self, $file ) = (@_);

    # The job
    my %job;

    # current section
    my $label = "";

    open( my $fh, "<", $file ) or
      die "Failed to open $file - $!";
    while ( my $line = <$fh> )
    {

        # skip comments
        next if ( $line =~ /^#/ );

        # We might have options - if we're not in the stage-section
        if ( $line =~ /^([^=]+)=(.*)$/ )
        {

            my $key = $1;
            my $val = $2;

            # strip spaces
            $key =~ s/^\s+|\s+$//g;
            $val =~ s/^\s+|\s+$//g;

            # Store the option
            if ( length($label) == 0 )
            {
                $job{ 'options' }{ $key } = $val;
            }
        }

        # label?
        if ( $line =~ /^([a-zA-Z]+):$/ )
        {
            $label = $1;
        }
        else
        {

            if ( length($label) )
            {
                chomp($line);
                if ( length($line) > 0 )
                {
                    push( @{ $job{ $label } }, $line );
                }
            }
        }
    }
    close($fh);

    return \%job;
}


=begin doc

Write the given array of lines to a shell-script file, ensuring that we
terminate on error.  We expand some variables as we go.

=end doc

=cut

sub writeShellScript
{

    my ( $self, $path, $container, @lines ) = (@_);

    $self->{ 'verbose' } && print "Writing script to $path:\n";

    # We expand the container-name into a series of variables that
    # the user might use for uploading, etc.  Do that here.
    my $c_name = "";
    my $c_ver  = "";
    if ( $container =~ /(.*)[:\/](.*)/ )
    {
        $c_name = $1;
        $c_ver  = $2;
    }


    open( my $handle, ">", $path ) or
      die "Failed to write to $path - $!";

    #
    # header - Which ensures we terminate on-error.
    #
    print $handle <<HEADER;
#!/bin/bash
set -e
HEADER

    if ( $self->{ 'verbose' } )
    {
        print $handle <<OPTIONS;
set -x
OPTIONS
    }

    # Output the lines we've been given, expanding variables
    # as we write the output.
    foreach my $line (@lines)
    {
        # Expand $HOME -> /home/blah
        while ( $line =~ /^(.*)\$HOME(.*)$/ )
        {
            $line = $1 . $ENV{ 'HOME' } . $2;
        }

        # Expand $RECIPE -> basename of loaded recipe
        while ( $line =~ /^(.*)\$RECIPE(.*)$/ )
        {
            my $pre  = $1;
            my $post = $2;

            # Get just the basename
            my $file = File::Basename::basename( $self->{ 'filename' } );

            # Remove the extension
            $file =~ s{\.[^.]+$}{};

            # Now handle the replacement
            $line = $pre . $file . $post;
        }

        # Expand $IMAGE_NAME -> "debian", etc.
        while ( $line =~ /^(.*)\$IMAGE_NAME(.*)$/ )
        {
            $line = $1 . $c_name . $2;
        }

        # Expand $IMAGE_VERSION -> "stretch", etc.
        while ( $line =~ /^(.*)\$IMAGE_VERSION(.*)$/ )
        {
            $line = $1 . $c_ver . $2;
        }

        # Expand $IMAGE -> "debian:stretch", etc.
        while ( $line =~ /^(.*)\$IMAGE(.*)$/ )
        {
            $line = $1 . $container . $2;
        }

        print $handle $line . "\n";
        $self->{ 'verbose' } && print "\t$line\n";
    }
    close($handle);
}


=begin doc

Execute executes the recipe we've been given.

CI jobs are divided into three parts: before, during, and after. This
function basically just executes the jobs in turn.

=end doc

=cut

sub Execute
{
    my ( $self, $default_container ) = (@_);

    # Create a temporary directory
    my $dir = File::Temp::tempdir( "/tmp/thyme.XXXXXX", CLEANUP => 0 );
    print "Operating in $dir\n";

    #
    # Our job
    #
    my $job = $self->{ 'job' };

    #
    # Find the container we're going to run with.
    #
    # This might be specified in the recipe itself.
    #
    my $container = $job->{ 'options' }->{ 'container' };
    if ( !$container )
    {
        # If not then use the default.
        $container = $default_container;
    }

    # Ensure our current working directory is sane.
    chdir($dir);

    # Write out the beginning-script
    push( @{ $job->{ 'before' } }, "touch .before" );
    $self->writeShellScript( "$dir/before.sh", $container,
                             @{ $job->{ 'before' } } );

    # execute it.
    $self->{ 'verbose' } && print "Executing $dir/before.sh\n";
    system("/bin/bash $dir/before.sh");
    if ( !-e "$dir/.before" )
    {
        print "Execution of before-tasks failed!\n";

        # Error
        return 1;
    }


    # Write out the during-script in the temporary directory, the list of
    # all the commands we'll execute inside the image.
    push( @{ $job->{ 'during' } }, "touch /work/.during" );
    $self->writeShellScript( "$dir/during.sh", $container,
                             @{ $job->{ 'during' } } );


    #
    # We can now use docker to run the temporary thing, in the configured
    # container.
    #
    # Here we run interactively SOLELY so that we're blocking on the result
    # and so that we can see the output when we run our job.
    #
    $self->{ 'verbose' } && print "Executing $dir/during.sh\n";
    system(
          "docker run -v $dir:/work --interactive $container sh /work/during.sh"
    );

    #
    # If the file ".during" doesn't exist then the previous steps didn't
    # complete successfully.
    #
    if ( !-e "$dir/.during" )
    {
        print "Execution of docker-tasks failed!\n";

        # Error
        return 1;
    }

    # Write out the after-script
    chdir($dir);
    push( @{ $job->{ 'after' } }, "touch .after" );
    $self->writeShellScript( "$dir/after.sh", $container,
                             @{ $job->{ 'after' } } );

    # Execute it.
    $self->{ 'verbose' } && print "Executing $dir/after.sh\n";
    system("/bin/bash $dir/after.sh");

    if ( !-e "$dir/.after" )
    {
        print "Execution of after-tasks failed!\n";

        # Error
        return 1;
    }

    # All our steps completed successfully
    return 0;
}



##
## Entry Point
##

package main;

#
# Disable buffering
#
$| = 1;

#
# Parsed command-line options go here
#
my %CONFIG;

exit
  if (
       !GetOptions( "help"        => \$CONFIG{ 'help' },
                    "container=s" => \$CONFIG{ 'container' },
                    "recipe=s"    => \$CONFIG{ 'recipe' },
                    "verbose"     => \$CONFIG{ 'verbose' } ) );

pod2usage(1) if ( $CONFIG{ 'help' } );



#
# Default options
#
$CONFIG{ 'container' } ||= "debian:stretch";
$CONFIG{ 'recipe' }    ||= "thyme.recipe";

#
# We expect the recipe to exist.
#
if ( !-e $CONFIG{ 'recipe' } )
{
    print "Please specify a recipe to execute, via `--recipe=xx.recipe`.\n";
    print "(The default file $CONFIG{'recipe'} was not found.)\n";
    exit(1);
}


#
# Create the helper object.
#
my $obj = Thyme->new( filename => $CONFIG{ 'recipe' },
                      verbose  => $CONFIG{ 'verbose' } );

#
# Now launch the job.
#
my $ret = $obj->Execute( $CONFIG{ 'container' } );

#
# Preserve our result as an exit-code
#
exit($ret);
